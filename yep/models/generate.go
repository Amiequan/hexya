// Copyright 2016 NDP Syst√®mes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

import (
	"fmt"
	"path"
	"reflect"
	"strings"
	"text/template"

	"github.com/npiganeau/yep/yep/tools/generate"
)

// GeneratePool generates source code files inside the
// given directory for all models.
func GeneratePool(dir string) {
	docParamsMap := generate.GetMethodsDocAndParamsNames()
	for modelName, mi := range modelRegistry.registryByName {
		fileName := fmt.Sprintf("%s.go", strings.ToLower(modelName))
		generateModelPoolFile(mi, path.Join(dir, fileName), docParamsMap)
	}
}

// generateModelPoolFile generates the file with the source code of the
// pool object for the given modelInfo.
func generateModelPoolFile(mi *modelInfo, fileName string, docParamsMap map[generate.MethodRef]generate.DocAndParams) {
	// Generate model data
	deps := map[string]bool{
		generate.POOL_PATH: true,
	}
	type methodData struct {
		Name           string
		Doc            string
		Params         string
		ParamsWithType string
		Returns        string
	}
	type fieldData struct {
		Name string
		Type string
	}
	type modelData struct {
		Name    string
		Deps    []string
		Fields  []fieldData
		Methods []methodData
	}
	// Add the given type's path as dependency if not already imported
	addDependency := func(data *modelData, typ reflect.Type) {
		for typ.Kind() == reflect.Ptr {
			typ = typ.Elem()
		}
		fDep := typ.PkgPath()
		if fDep != "" && !deps[fDep] {
			data.Deps = append(data.Deps, fDep)
		}
		deps[fDep] = true
	}
	mData := modelData{
		Name: mi.name,
		Deps: []string{generate.MODELS_PATH},
	}

	for fieldName, fi := range mi.fields.registryByName {
		// Add fields
		fType := fi.structField.Type.String()
		fType = strings.Replace(fType, "pool.", "", 1)
		mData.Fields = append(mData.Fields, fieldData{Name: fieldName, Type: fType})
		// Add dependency for this field, if needed and not already imported
		addDependency(&mData, fi.structField.Type)
	}
	// Add methods
	for methodName, methInfo := range mi.methods.cache {
		ref := generate.MethodRef{Model: mi.name, Method: methodName}
		dParams, ok := docParamsMap[ref]
		if !ok {
			// Methods generated in 'yep/models' don't have a model set
			newRef := generate.MethodRef{Model: "", Method: methodName}
			dParams = docParamsMap[newRef]
		}
		methType := methInfo.methodType
		params := make([]string, methType.NumIn()-1)
		paramsType := make([]string, methType.NumIn()-1)
		for i := 0; i < methType.NumIn()-1; i++ {
			mts := methType.In(i + 1).String()
			paramsType[i] = fmt.Sprintf("%s %s", dParams.Params[i+1], strings.Replace(mts, "pool.", "", 1))
			params[i] = dParams.Params[i+1]
			addDependency(&mData, methType.In(i+1))
		}

		var returns string
		if methType.NumOut() > 0 {
			returns = strings.Replace(methType.Out(0).String(), "pool.", "", 1)
			addDependency(&mData, methType.Out(0))
		}

		methData := methodData{
			Name:           methodName,
			Doc:            dParams.Doc,
			Params:         strings.Join(params, ", "),
			ParamsWithType: strings.Join(paramsType, ", "),
			Returns:        returns,
		}
		mData.Methods = append(mData.Methods, methData)
	}
	// Create file
	generate.CreateFileFromTemplate(fileName, defsFileTemplate, mData)
	log.Info("Generated pool source file for model", "model", mi.name, "fileName", fileName)
}

var defsFileTemplate = template.Must(template.New("").Parse(`
// This file is autogenerated by yep-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package pool

import (
{{ range .Deps }} 	"{{ . }}"
{{ end }}
)

// {{ .Name }} is an autogenerated struct type to handle {{ .Name }} data.
type {{ .Name }} struct {
{{ range .Fields }}	{{ .Name }} {{ .Type }}
{{ end }}
}

// {{ .Name }}Set is an autogenerated type to handle {{ .Name }} objects.
type {{ .Name }}Set struct {
	models.BaseCaller
	env     *models.Environment
	records []*{{ .Name }}
	ids     []int64
}

// ModelName returns the name of the model
func (s {{ .Name }}Set) ModelName() string {
	return "{{ .Name }}"
}

// Ids returns the ids of the records in this RecordSet
func (s {{ .Name }}Set) Ids() []int64 {
	return s.ids
}

// New{{ .Name }}Set returns a new {{ .Name }}Set instance in the given Environment
func New{{ .Name }}Set(env *models.Environment) {{ .Name }}Set {
	return {{ .Name }}Set{
		env: env,
	}
}

var _ models.RecordSet = {{ .Name }}Set{}

// Records returns a slice with all the records of this RecordSet, as singleton
// RecordSets
func (s {{ .Name }}Set) Records() []{{ .Name }}Set {
	res := make([]{{ .Name }}Set, len(s.records))
	for i, rec := range s.records {
		nrs := New{{ .Name }}Set(s.env)
		nrs.records = []*{{ .Name }}{rec}
		res[i] = nrs
	}
	return res
}

// Call the method given by name with the given args
func (s {{ .Name }}Set) Call(methName string, args ...interface{}) interface{} {
	return s.BaseCaller.Call(methName, s, args...)
}

// Super calls the next method Layer.
// This method is meant to be used inside a method layer function to call its parent.
func (s {{ .Name }}Set) Super(args ...interface{}) interface{} {
	return s.BaseCaller.Super(s, args...)
}

{{ range .Fields }}
// {{ .Name }} is a getter for the value of the "{{ .Name }}" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s {{ $.Name }}Set) {{ .Name }}() {{ .Type }} {
	var rec *{{ $.Name }}
	if len(s.records) > 0 {
		rec = s.records[0]
	} else {
		rec = &{{ $.Name }}{}
	}
	return rec.{{ .Name }}
}
{{ end }}

{{ range .Methods }}
{{ .Doc }}
func (s {{ $.Name }}Set) {{ .Name }}({{ .ParamsWithType }}) ({{ .Returns }}) {
{{ if eq .Returns "" -}}
	s.Call("{{ .Name }}", {{ .Params}})
{{- else -}}
	return s.Call("{{ .Name }}", {{ .Params}}).({{ .Returns }})
{{- end }}
}

{{ end }}
`))
