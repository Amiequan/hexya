// Copyright 2016 NDP Syst√®mes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"path"
	"strings"
	"text/template"

	"github.com/npiganeau/yep/yep/tools"
)

// GeneratePool generates source code files inside the
// given directory for all models.
func GeneratePool(dir string) {
	for modelName, mi := range modelRegistry.registryByName {
		fileName := fmt.Sprintf("%s.go", strings.ToLower(modelName))
		generateModelPoolFile(mi, path.Join(dir, fileName))
	}
}

// generateModelPoolFile generates the file with the source code of the
// pool object for the given modelInfo.
func generateModelPoolFile(mi *modelInfo, fileName string) {
	// Generate model data
	deps := make(map[string]bool)
	type modelData struct {
		Name   string
		Deps   []string
		Fields []string
	}
	mData := modelData{Name: mi.name}
	for fieldName, fi := range mi.fields.registryByName {
		fType := fi.structField.Type.String()
		fType = strings.Replace(fType, "pool.", "", 1)
		mData.Fields = append(mData.Fields, fmt.Sprintf("%s %s", fieldName, fType))
		fDep := fi.structField.Type.PkgPath()
		if fDep != "" && !deps[fDep] {
			mData.Deps = append(mData.Deps, fDep)
		}
		deps[fDep] = true
	}
	// Render and format template
	var srcBuffer bytes.Buffer
	fileTemplate.Execute(&srcBuffer, mData)
	srcData, err := format.Source(srcBuffer.Bytes())
	if err != nil {
		tools.LogAndPanic(log, "Error while formatting generated source file", "error", err, "model", mi.name, "fileName", fileName, "mData", fmt.Sprintf("%#v", mData), "src", srcBuffer.String())
	}
	// Write to file
	err = ioutil.WriteFile(fileName, srcData, 0644)
	if err != nil {
		tools.LogAndPanic(log, "Error while saving generated source file", "error", err, "model", mi.name, "fileName", fileName)
	}
	log.Info("Generated pool source file for model", "model", mi.name, "fileName", fileName)
}

var fileTemplate = template.Must(template.New("").Parse(`
// This file is autogenerated by yep-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package pool

import (
	"github.com/npiganeau/yep/yep/models"
{{ range .Deps }} 	"{{ . }}"
{{ end }}
)

// {{ .Name }} is an autogenerated struct type to handle {{ .Name }} objects.
type {{ .Name }} struct {
{{ range .Fields }}	{{ . }}
{{ end }}
}

// ModelName returns the name of the model
func (s {{ .Name }}) ModelName() string {
	return "{{ .Name }}"
}

// Ids returns the ids of the records fetched
func (s {{ .Name }}) Ids() []int64 {
	return []int64{s.ID}
}

// New{{ .Name }} returns a pointer to a new {{ .Name }} instance
func New{{ .Name }}() *{{ .Name }} {
	return &{{ .Name }}{}
}

var _ models.RecordSet = {{ .Name }}{}

// {{ .Name }}Set is an autogenerated struct type to handle
// a collection{{ .Name }} objects.
type {{ .Name }}Set []{{ .Name }}

// ModelName returns the name of the model
func (s {{ .Name }}Set) ModelName() string {
	return "{{ .Name }}"
}

// Ids returns the ids of the records fetched
func (s {{ .Name }}Set) Ids() []int64 {
	res := make([]int64, len(s))
	for i, r := range s {
		res[i] = r.ID
	}
	return res
}

// New{{ .Name }}Set returns a pointer to a new {{ .Name }}Set instance
func New{{ .Name }}Set() *{{ .Name }}Set {
	return &{{ .Name }}Set{}
}

var _ models.RecordSet = {{ .Name }}Set{}
`))
